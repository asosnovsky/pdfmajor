{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PDFMajor Latest Release PDF-Major is a fork of PDFMiner.six . It is meant to be a more light-weight implementation that makes fewer assumptions on the data. The ultimate goal of this project is to provide a simpler, faster and more functional library that both casual and low-level developers could build upon. Documentation See documentation here . Basic Example from pdfmajor.interpreter import PDFInterpreter for page in PDFInterpreter(\"/path/to/pdf.pdf\"): print(\"page start\", page.page_num) for item in page: print(\" >\", item) print(\"page end\", page.page_num) Why Another Fork? PDFMiner was designed to run in python 2.7>, PDFMiner.six was written to bring cross-version support for python 2 and 3. However, after attempting to build and extend upon PDFMiner.six I found it rather difficult to extend and identify additional details regarding the items encoded in the pdf. This library will attempt to expose as much information as possible to end-users, without having them solely rely on to-xml or to-json exports. Features Functional extraction method based on generators Parse, analyze, and convert PDF documents. PDF-1.7 specification support. (well, almost) Font-Color extraction Shape fill and stroke color extraction CJK languages and vertical writing scripts support. Various font types (Type1, TrueType, Type3, and CID) support. Basic encryption (RC4) support. Note : We took out the layout-analysis process in this version (there is no more LTTextHorizontal or LTTextVertical). While the mathematics behind the grouping process was sound, the coupling of the layout-analysis process with the parsing and interpretation process produced unfriendly-code. This feature could be brought back by running your own implementation of it on the pdfmajor.interpreter.PageInterpreter class, but at the current time is not supported. How to Install Source Install Python 3.6.4 or newer. clone this repo git clone https://github.com/asosnovsky/pdfmajor * install repo python setup.py install Pypi Install Python 3.6.4 or newer. install repo pip install pdfmajor Terms and Conditions (This is so-called MIT/X License) Copyright (c) 2018-2019 Ariel Sosnovsky Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Home"},{"location":"#pdfmajor","text":"Latest Release PDF-Major is a fork of PDFMiner.six . It is meant to be a more light-weight implementation that makes fewer assumptions on the data. The ultimate goal of this project is to provide a simpler, faster and more functional library that both casual and low-level developers could build upon.","title":"PDFMajor"},{"location":"#documentation","text":"See documentation here .","title":"Documentation"},{"location":"#basic-example","text":"from pdfmajor.interpreter import PDFInterpreter for page in PDFInterpreter(\"/path/to/pdf.pdf\"): print(\"page start\", page.page_num) for item in page: print(\" >\", item) print(\"page end\", page.page_num)","title":"Basic Example"},{"location":"#why-another-fork","text":"PDFMiner was designed to run in python 2.7>, PDFMiner.six was written to bring cross-version support for python 2 and 3. However, after attempting to build and extend upon PDFMiner.six I found it rather difficult to extend and identify additional details regarding the items encoded in the pdf. This library will attempt to expose as much information as possible to end-users, without having them solely rely on to-xml or to-json exports.","title":"Why Another Fork?"},{"location":"#features","text":"Functional extraction method based on generators Parse, analyze, and convert PDF documents. PDF-1.7 specification support. (well, almost) Font-Color extraction Shape fill and stroke color extraction CJK languages and vertical writing scripts support. Various font types (Type1, TrueType, Type3, and CID) support. Basic encryption (RC4) support. Note : We took out the layout-analysis process in this version (there is no more LTTextHorizontal or LTTextVertical). While the mathematics behind the grouping process was sound, the coupling of the layout-analysis process with the parsing and interpretation process produced unfriendly-code. This feature could be brought back by running your own implementation of it on the pdfmajor.interpreter.PageInterpreter class, but at the current time is not supported.","title":"Features"},{"location":"#how-to-install","text":"","title":"How to Install"},{"location":"#source","text":"Install Python 3.6.4 or newer. clone this repo git clone https://github.com/asosnovsky/pdfmajor * install repo python setup.py install","title":"Source"},{"location":"#pypi","text":"Install Python 3.6.4 or newer. install repo pip install pdfmajor","title":"Pypi"},{"location":"#terms-and-conditions","text":"(This is so-called MIT/X License) Copyright (c) 2018-2019 Ariel Sosnovsky Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Terms and Conditions"},{"location":"api/","text":"API The library is constructed from 4 base modules: parser : contains low-level classes for extracting fundamental data-structures from the documents interpreter : a interpreter of the pdf-standard commands converters : contains high-level functions for conversion of the fundamental pdf structures to other formats imagewriter : contains a simple implementation for converting PDF Image Streams to png/bmp/img formats parser WIP interpreter a interpreter of the pdf-standard commands Example from pdfmajor.interpreter import PDFInterpreter for page in PDFInterpreter(\"/path/to/pdf.pdf\"): print(\"page start\", page.page_num) for item in page: print(\" >\", item) print(\"page end\", page.page_num) interpreter.PDFInterpreter This generator-function yields individual pages which contain their respected items. Arguments input_file_path : str preload : bool defaults to False maxpages : int defaults to 0 password : str defaults to None caching : bool defaults to True check_extractable : bool defaults to True ignore_bad_chars : bool defaults to False pagenos : List[int] defaults to None debug_level : logging.levels defaults logging.WARNING Yield Value This function returns a generator that yields PDFInterpreter . interpreter.PageInterpreter This generator-function-class yields individual layout items . Layout Items All layout items extend the LTItem class. There are two kinds of layout items: LTComponent: extends the base LTItem class, this class will have additional values such as boundary boxes, height and width LTContainer: extends the LTComponent class, this class is used to contain elements of the pdf that would have child elements. Iterating on this element will output its child elements. Layout Containers All of these classes extend the LTContainer class. LTXObject: a layout item containing other additional layout items LTCharBlock: a layout item containing LTChars, this corresponds to whenever a TJ or Tj operators is issued within a text object. LTTextBlock: a layout item containing LTCharBlocks, note that this directly corresponds to the BT and ET operators pair in the pdf standard Layout Components All of these classes extend the LTComponent class. LTChar: an individual character LTCurves: represents a collection of svg-paths (available under self.paths ) LTImage: a component containing information regarding an image converters Contains high-level functions for conversion of the fundamental pdf structures to other formats. This library includes 4 high-level conversion cases: HTML JSON XML Text These formats are all generated using the PageInterpreter . To use them simply call the static method parse_file . Example from pdfmajor.converters import convert_file convert_file( \"path/to/input/file.pdf\", \"path/to/output/file.html\", out_type=\"html\" ) converters.convert_file A high-level abstraction for the conversion classes. input_file : TextIOWrapper output_file : TextIOWrapper image_folder_path : str defaults to None codec : str defaults to 'utf-8' maxpages : int defaults to 0 password : str defaults to None caching : bool defaults to True check_extractable : bool defaults to True pagenos : List[int] defaults to None out_type : str defaults to 'html' imagewriter WIP","title":"API"},{"location":"api/#api","text":"The library is constructed from 4 base modules: parser : contains low-level classes for extracting fundamental data-structures from the documents interpreter : a interpreter of the pdf-standard commands converters : contains high-level functions for conversion of the fundamental pdf structures to other formats imagewriter : contains a simple implementation for converting PDF Image Streams to png/bmp/img formats","title":"API"},{"location":"api/#parser","text":"WIP","title":"parser"},{"location":"api/#interpreter","text":"a interpreter of the pdf-standard commands","title":"interpreter"},{"location":"api/#example","text":"from pdfmajor.interpreter import PDFInterpreter for page in PDFInterpreter(\"/path/to/pdf.pdf\"): print(\"page start\", page.page_num) for item in page: print(\" >\", item) print(\"page end\", page.page_num)","title":"Example"},{"location":"api/#interpreterpdfinterpreter","text":"This generator-function yields individual pages which contain their respected items.","title":"interpreter.PDFInterpreter"},{"location":"api/#arguments","text":"input_file_path : str preload : bool defaults to False maxpages : int defaults to 0 password : str defaults to None caching : bool defaults to True check_extractable : bool defaults to True ignore_bad_chars : bool defaults to False pagenos : List[int] defaults to None debug_level : logging.levels defaults logging.WARNING","title":"Arguments"},{"location":"api/#yield-value","text":"This function returns a generator that yields PDFInterpreter .","title":"Yield Value"},{"location":"api/#interpreterpageinterpreter","text":"This generator-function-class yields individual layout items .","title":"interpreter.PageInterpreter"},{"location":"api/#layout-items","text":"All layout items extend the LTItem class. There are two kinds of layout items: LTComponent: extends the base LTItem class, this class will have additional values such as boundary boxes, height and width LTContainer: extends the LTComponent class, this class is used to contain elements of the pdf that would have child elements. Iterating on this element will output its child elements.","title":"Layout Items"},{"location":"api/#layout-containers","text":"All of these classes extend the LTContainer class. LTXObject: a layout item containing other additional layout items LTCharBlock: a layout item containing LTChars, this corresponds to whenever a TJ or Tj operators is issued within a text object. LTTextBlock: a layout item containing LTCharBlocks, note that this directly corresponds to the BT and ET operators pair in the pdf standard","title":"Layout Containers"},{"location":"api/#layout-components","text":"All of these classes extend the LTComponent class. LTChar: an individual character LTCurves: represents a collection of svg-paths (available under self.paths ) LTImage: a component containing information regarding an image","title":"Layout Components"},{"location":"api/#converters","text":"Contains high-level functions for conversion of the fundamental pdf structures to other formats. This library includes 4 high-level conversion cases: HTML JSON XML Text These formats are all generated using the PageInterpreter . To use them simply call the static method parse_file .","title":"converters"},{"location":"api/#example_1","text":"from pdfmajor.converters import convert_file convert_file( \"path/to/input/file.pdf\", \"path/to/output/file.html\", out_type=\"html\" )","title":"Example"},{"location":"api/#convertersconvert_file","text":"A high-level abstraction for the conversion classes. input_file : TextIOWrapper output_file : TextIOWrapper image_folder_path : str defaults to None codec : str defaults to 'utf-8' maxpages : int defaults to 0 password : str defaults to None caching : bool defaults to True check_extractable : bool defaults to True pagenos : List[int] defaults to None out_type : str defaults to 'html'","title":"converters.convert_file"},{"location":"api/#imagewriter","text":"WIP","title":"imagewriter"}]}